## 
## HEAT_SOAK HEATER=<heater_name> TARGET=<target_heater_temperature> SOAKER=<heat_soak_temp_sensor_name> [RATE=<heat_soak_temp_rate_of_change>] [TIMEOUT=<time_to_abort_heat_soak>]
##
##
## e.g.
## HEAT_SOAK HEATER=heater_bed TARGET=100 SOAKER="temperature_sensor top_bed"
##
## Based on work by blalor: https://klipper.discourse.group/t/interruptible-heat-soak/1552
##

[gcode_macro HEAT_SOAK]
description: Wait for a temperature sensor to reach thermal equilibrium

variable_last_temp: 0
variable_stage: None ## heating -> soaking -> done -> None
variable_total_time_elapsed: 0
variable_soak_time_remaining: 0
variable_check_interval: 5.0
variable_check_interval_heating: 5.0
variable_check_interval_soaking: 30.0

## in seconds
variable_heater_sensor: None
variable_soaker_sensor: None
variable_timeout: 20
variable_target_temp: 0
variable_target_rate: 10
variable_callback: None
variable_mintemp: 45

gcode:
    {% set HEATER  = (params.HEATER | string) %}
    {% set TARGET  = (params.TARGET | default(0) | float) %}
    {% set SOAKER  = (params.SOAKER | string) %}
    {% set RATE    = (params.RATE | default(0.2) | float) %}  ## in degrees C per minute
    {% set TIMEOUT = (params.TIMEOUT | default(60) | int) * 60 %} ## minutes to seconds
    {% set CALLBACK  = (params.CALLBACK) %}
    {% set soak_temp = printer[SOAKER].temperature %}
    {% set MINTEMP = (params.MINTEMP | default(45) | float) %} ## minimum temperature to end heat soak
    
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=heater_sensor       VALUE="'{ HEATER }'"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE={ TARGET }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soaker_sensor       VALUE="'{ SOAKER }'"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_rate         VALUE={ RATE }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ TIMEOUT }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=callback            VALUE="'{ CALLBACK }'"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=last_temp           VALUE={ soak_temp }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'heating'"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=mintemp             VALUE={ MINTEMP }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=check_interval      VALUE={ check_interval_heating }
    
    SET_HEATER_TEMPERATURE HEATER={ HEATER } TARGET={ TARGET }
    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ check_interval }
    ; pause the print
    PAUSE
    
    CENTER
    _SET_FAN_SPEED PERCENT=100

[gcode_macro CANCEL_HEAT_SOAK]
description: cancels an in-progress HEAT_SOAK cycle
gcode:
    # check that the HEAT_SOAK macro is active before canceling
    {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}
    {% set stage = heat_soak.stage %}
    {% if stage in ("heating", "soaking") %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'"
        UPDATE_DELAYED_GCODE ID=heat_soaker DURATION=1
    {% endif %}

[delayed_gcode heat_soaker]
gcode:
    {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}
    # debug
    #{ action_respond_info( printer['gcode_macro HEAT_SOAK'] | tojson )}

    ## update total time elapsed
    {% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }

    {% set soaker_sensor = printer[heat_soak.soaker_sensor] %}
    {% set soak_temp = soaker_sensor.temperature %}
    {% set heater_sensor = printer[heat_soak.heater_sensor] %}
    {% set heater_temp = heater_sensor.temperature %}
    {% set stage = heat_soak.stage %}
    ## compute temperature change rate & update tracking variable for the soaking sensor
    {% set soak_temp_rate = (((soak_temp - heat_soak.last_temp) / heat_soak.check_interval) * 60) %}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=last_temp VALUE={ soak_temp }

    {% if stage == "heating" %}
        {% if heater_temp < (heat_soak.target_temp - (0.01 * heat_soak.target_temp)) %}
            {action_respond_info("Heating %.1fC / %.1fC" % (heater_temp, heat_soak.target_temp))}
        {% else %}
            {action_respond_info("Heating completed after ~%.1fm, starting heat soak phase." % (total_time_elapsed / 60.0))}
            {% set stage = "soaking" %}
            # reset total time to 0 so soaking time is reported from 0
            {% set total_time_elapsed = 0 %}
            
            SET_FAN_SPEED FAN=chamber_fan SPEED=1
            
            SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }
            SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=check_interval     VALUE={ heat_soak.check_interval_soaking }
        {% endif %}
    {% endif %}

    {% if stage == "soaking" %}
        ## decrement the soak countdown
        {% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }
      
        ## abort soaking if timeout is reached
        #{ action_respond_info("soak_time_remaining: %.1f igual 0" % soak_time_remaining) }
        #{ action_respond_info("soak_temp_rate: %.1f" % soak_temp_rate) }
        #{ action_respond_info("<") }
        #{ action_respond_info("heat_soak.target_rate: %.1f" % heat_soak.target_rate) }
        #{ action_respond_info(" E ") }
        #{ action_respond_info("soak_temp: %.1f" % soak_temp) }
        #{ action_respond_info(">") }
        #{ action_respond_info("heat_soak.mintemp: %.1f" % heat_soak.mintemp) }
        
        {% if soak_time_remaining == 0 %}
            {action_respond_info("Heat soak timed out after ~%.1fm" % (total_time_elapsed / 60.0))}
            {% set stage = "cancel" %}
        ## end soaking if the target soak_temp_rate is achieved
        {% elif (soak_temp_rate <= heat_soak.target_rate) and (soak_temp >= heat_soak.mintemp)  %}
            {action_respond_info("Heat soak complete after after ~%.1fm at %.1fC" % (total_time_elapsed / 60.0, soak_temp))}
            {% set stage = "done" %}
        ## log and continue soaking
        {% else %}
            {action_respond_info("Heat Soaking %.2f C/m -> %.2f C/m" % (soak_temp_rate, heat_soak.target_rate))}
            {action_respond_info("Heat Soaking temperature: %.1f C / minimum: %.1f C" % (soak_temp, heat_soak.mintemp))}
            {action_respond_info("Heat Soaking elapsed time: %.1f m" % (total_time_elapsed / 60.0))}

        {% endif %}

    {% endif %}

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{ stage }'"

    {% if stage in ("done", "cancel") %}
        ## reset all state vars, except stage, which may be queried via the api
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=last_temp           VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=heater_sensor       VALUE=None
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soaker_sensor       VALUE=None
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_rate         VALUE=10
        
        SET_FAN_SPEED FAN=chamber_fan SPEED=0
        
        {% if stage == "cancel" %}
            {% set stage = "done" %}
            CANCEL_PRINT
        {% else %}
            RESUME
            {% if heat_soak.callback %}
                {heat_soak.callback}
            {% endif %}
            SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=callback VALUE=None
        {% endif %}

    {% else %}

        {% if total_time_elapsed % 90 == 0 %}
            ## output status periodically
            {% if stage == "heating" %}
                M117 { "heating -- %.1fm elapsed" % (total_time_elapsed / 60.0) }
            {% elif stage == "soaking" %}
                M117 { "soaking -- %.1fm remaining" % (soak_time_remaining / 60.0) }
            {% endif %}
        {% endif %}

        ## trigger ourselves again
        UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ heat_soak.check_interval }

        ## dwell for 1ms to prevent from going idle
        G4 P1

    {% endif %}